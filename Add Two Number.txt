You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {

        ListNode list=new ListNode();
        int leading=0;
        ListNode previous=null;
        int sum=0;
        while(l1!=null & l2!=null){
            sum=leading+l1.val+l2.val;
            leading=0;
            if(sum>9){
                leading =sum/10;
                sum=sum%10;
            }
           list=new ListNode(sum,previous);
           previous=list;
           l1=l1.next;
           l2=l2.next;
        }
       while(l1!=null) {
    	   sum=leading+l1.val;
    	   leading=0;
           if(sum>9){
               leading =sum/10;
               sum=sum%10;
           }
          list=new ListNode(sum,previous);
          previous=list;
          l1=l1.next;
       }
       while(l2!=null) {
    	   sum=leading+l2.val;
    	   leading=0;
           if(sum>9){
               leading =sum/10;
               sum=sum%10;
           }
          list=new ListNode(sum,previous);
          previous=list;
          l2=l2.next;
       }
       if(leading>0) {
    	   list=new ListNode(leading,previous);
           previous=list;
       }
        ListNode temp=new ListNode();
        ListNode tempprev=null;
        while(list!=null) {
        	temp=new ListNode(list.val,tempprev);
        	tempprev=temp;
        	list=list.next;
        }
        return temp;
    }

       
}


